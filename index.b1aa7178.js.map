{"mappings":"ICIM,EAAA,EAAO,GCGb,CAAA,eEI2C,EFJrC,SAAA,IAgBF,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CArBC,ACPC,CAAA,SAA2B,CAAQ,CAAE,CAAW,EACnD,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,CAAA,EDKM,IAAA,CAAA,GAuBF,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,MAAM,CAAG,M,CAzBZ,OEIqC,EFJrC,C,CA4BJ,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAY,CAAA,EAEP,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,KAA3C,A,S,C,EAKE,IAAK,IAJD,EAAS,EAAK,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,SAAC,CAArC,EAA+C,OAAA,AAAU,IAAV,C,GAEzC,EAAY,EAAE,CAEX,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAC7B,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAU,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACxB,EAAK,SAAS,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CAC3B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAY,CAAA,GACW,IAAd,CAAM,CAAC,EAAE,EAClB,EAAU,IAAI,CAAC,CAAM,CAAC,EAAE,EAM5B,IAFA,EAAS,EAAU,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE9B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGT,EAAK,WAAW,CAAC,EAAK,KAAK,CAAC,EAAI,CAAE,KACrC,EAAK,KAAK,CAAC,EAAI,CAAG,EAClB,EAAY,CAAA,EAEhB,EA1BA,GA4BI,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,YAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAa,CAAA,EAER,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,KAA3C,A,S,C,EAIE,IAAK,IAHD,EAAS,EAAK,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,SAAC,CAArC,EAA+C,OAAA,AAAU,IAAV,C,GACzC,EAAY,EAAE,CAEX,EAAI,EAAO,MAAM,CAAG,EAAG,GAAK,EAAG,IAClC,EAAI,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtC,EAAU,OAAO,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EAC3B,EAAK,SAAS,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CAC3B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAa,CAAA,GACU,IAAd,CAAM,CAAC,EAAE,EAClB,EAAU,OAAO,CAAC,CAAM,CAAC,EAAE,EAK/B,IAFA,EAAS,EAAU,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE9B,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGZ,EAAK,WAAW,CAAC,EAAK,KAAK,CAAC,EAAI,CAAE,KACrC,EAAK,KAAK,CAAC,EAAI,CAAG,EAClB,EAAa,CAAA,EAEjB,EAxBA,GA0BI,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,SAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAU,CAAA,EAEL,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EAGE,IAAK,IAFD,EAAS,EAAE,CAEN,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EAMpC,IAAK,IAFC,EAAY,EAAE,CAEX,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAC7B,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAU,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACxB,EAAK,SAAS,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CAC3B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAU,CAAA,GACa,IAAd,CAAM,CAAC,EAAE,EAClB,EAAU,IAAI,CAAC,CAAM,CAAC,EAAE,EAK5B,IAFA,EAAS,EAAU,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE9B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,GACtC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,CAClC,EAAU,CAAA,EAGhB,EAjCA,GAmCI,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAY,CAAA,EAEP,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EAGE,IAAK,IAFD,EAAS,EAAE,CAEN,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EAMpC,IAAK,IAFC,EAAY,EAAE,CAEX,EAAI,EAAO,MAAM,CAAG,EAAG,GAAK,EAAG,IAClC,EAAI,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtC,EAAU,OAAO,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EAC3B,EAAK,SAAS,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CAC3B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAY,CAAA,GACW,IAAd,CAAM,CAAC,EAAE,EAClB,EAAU,OAAO,CAAC,CAAM,CAAC,EAAE,EAK/B,IAFA,EAAS,EAAU,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE9B,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGjB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,GACtC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,CAClC,EAAY,CAAA,EAGlB,EAjCA,GAmCI,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,YAAY,GAErB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,SAAS,AACvB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAYA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAKA,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAM,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAe,SAAS,aAAa,CAAC,kBAE5C,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAEzB,EAAa,SAAS,CAAC,MAAM,CAAC,UAE9B,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,SAAS,CAAG,EAEjB,IAAM,EAAM,SAAS,aAAa,CAAC,UAEnC,EAAI,SAAS,CAAC,MAAM,CAAC,SAErB,EAAI,SAAS,CAAC,GAAG,CAAC,WAElB,EAAI,WAAW,CAAG,UAElB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,GAElB,IAAI,CAAC,MAAM,EACb,C,E,CAKA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,KAAK,EACZ,C,E,CAEA,IAAA,SAAA,MAAA,WACE,IAAM,EAAQ,SAAS,gBAAgB,CAAC,eACpC,EAAQ,EAGL,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADF,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EACE,KAAA,E,G,CADP,IAAA,IAAK,EAAA,EAAa,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,C,G,CACH,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAoB,CAApB,IAAM,EAAN,EAAA,KAAA,CACG,EAAO,CAAK,CAAC,EAAM,AAEzB,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEb,EAAQ,GACV,EAAK,SAAS,CAAC,GAAG,CAAE,eAAoB,MAAA,CAAN,IAEpC,GACF,C,C,M,E,CAVK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,C,C,C,M,E,CADF,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAcL,SAAS,aAAa,CAAC,eAAe,WAAW,CAAG,IAAI,CAAC,SAAS,AACpE,C,E,CAEA,IAAA,gBAAA,MAAA,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACzC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACZ,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,AAAsB,IAAtB,EAAW,MAAM,EAIrB,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC1D,EAAa,CAAU,CAAC,EAAY,AAI1C,CAAA,IAAI,CAAC,KAAK,CAAC,EAAW,GAAG,CAAC,CAAC,EAAW,GAAG,CAAC,CAFzB,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAG7C,C,E,CAEA,IAAA,cAAA,MAAA,SAAY,CAAI,CAAE,CAAI,EACpB,OACE,EAAK,MAAM,GAAK,EAAK,MAAM,EAC3B,EAAK,KAAK,CAAC,SAAC,CAAA,CAAO,CAFrB,EAE+B,OAAA,IAAU,CAAI,CAAC,EAAM,A,EAEtD,C,E,CAEA,IAAA,WAAA,MAAA,WACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EACH,GAAI,AADD,EAAA,KAAA,CACK,QAAQ,CAAC,QACf,MAAO,CAAA,C,C,M,E,CAFN,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,MAAO,CAAA,CACT,C,E,CAEA,IAAA,YAAA,MAAA,WACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,IAAK,IADI,EAAN,EAAA,KAAA,CACM,EAAI,EAAG,EAAI,EAAI,MAAM,CAAG,EAAG,IAClC,GAAI,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,CACvB,MAAO,CAAA,C,C,M,E,CAHR,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACzC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAG,EAAG,IAC7C,GAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CACnD,MAAO,CAAA,EAMN,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADF,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EACE,KAAA,E,G,CADP,IAAA,IAAK,EAAA,EAAa,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,C,G,CACH,IAAA,IAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAAS,IAAT,EACF,MAAO,CAAA,CAEX,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,C,C,C,M,E,CADF,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,MAAO,CAAA,CACT,C,E,CAEA,IAAA,eAAA,MAAA,WACE,IAAM,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBAExC,IAAI,CAAC,QAAQ,IACf,IAAI,CAAC,MAAM,CAAG,MACd,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAW,SAAS,CAAC,MAAM,CAAC,WACnB,IAAI,CAAC,SAAS,KACvB,IAAI,CAAC,MAAM,CAAG,OACd,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,SAAS,CAAC,MAAM,CAAC,UAEjC,C,E,CE1WkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFLhC,EEK4C,SAAS,CAAE,GFLvD,C,G,EDCN,AAFiB,SAAS,aAAa,CAAC,UAE/B,gBAAgB,CAAC,QAAS,WACjC,EAAK,KAAK,EACZ,GAEA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EAGE,OAFA,EAAE,cAAc,GAER,EAAE,IAAI,EACZ,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,YACH,EAAK,QAAQ,EAIjB,CACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.board = initialState;\n        this.gameScore = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    var mergedRow = [];\n                    for(var i = 0; i < newRow.length; i++){\n                        if (i < newRow.length - 1 && newRow[i] === newRow[i + 1]) {\n                            mergedRow.push(newRow[i] * 2);\n                            _this.gameScore += newRow[i] * 2;\n                            newRow[i + 1] = 0;\n                            movedLeft = true;\n                        } else if (newRow[i] !== 0) mergedRow.push(newRow[i]);\n                    }\n                    newRow = mergedRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    if (!_this.arraysEqual(_this.board[row], newRow)) {\n                        _this.board[row] = newRow;\n                        movedLeft = true;\n                    }\n                };\n                var movedLeft = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (movedLeft) {\n                    this.addRandomTile();\n                    this.render();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    var mergedRow = [];\n                    for(var i = newRow.length - 1; i >= 0; i--){\n                        if (i > 0 && newRow[i] === newRow[i - 1]) {\n                            mergedRow.unshift(newRow[i] * 2);\n                            _this.gameScore += newRow[i] * 2;\n                            newRow[i - 1] = 0;\n                            movedRight = true;\n                        } else if (newRow[i] !== 0) mergedRow.unshift(newRow[i]);\n                    }\n                    newRow = mergedRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newRow.length < 4)newRow.unshift(0);\n                    if (!_this.arraysEqual(_this.board[row], newRow)) {\n                        _this.board[row] = newRow;\n                        movedRight = true;\n                    }\n                };\n                var movedRight = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (movedRight) {\n                    this.addRandomTile();\n                    this.render();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    var mergedCol = [];\n                    for(var i = 0; i < newCol.length; i++){\n                        if (i < newCol.length - 1 && newCol[i] === newCol[i + 1]) {\n                            mergedCol.push(newCol[i] * 2);\n                            _this.gameScore += newCol[i] * 2;\n                            newCol[i + 1] = 0;\n                            movedUp = true;\n                        } else if (newCol[i] !== 0) mergedCol.push(newCol[i]);\n                    }\n                    newCol = mergedCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.board[row1][col] !== newCol[row1]) {\n                        _this.board[row1][col] = newCol[row1];\n                        movedUp = true;\n                    }\n                };\n                var movedUp = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (movedUp) {\n                    this.addRandomTile();\n                    this.render();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    var mergedCol = [];\n                    for(var i = newCol.length - 1; i >= 0; i--){\n                        if (i > 0 && newCol[i] === newCol[i - 1]) {\n                            mergedCol.unshift(newCol[i] * 2);\n                            _this.gameScore += newCol[i] * 2;\n                            newCol[i - 1] = 0;\n                            movedDown = true;\n                        } else if (newCol[i] !== 0) mergedCol.unshift(newCol[i]);\n                    }\n                    newCol = mergedCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newCol.length < 4)newCol.unshift(0);\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.board[row1][col] !== newCol[row1]) {\n                        _this.board[row1][col] = newCol[row1];\n                        movedDown = true;\n                    }\n                };\n                var movedDown = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (movedDown) {\n                    this.addRandomTile();\n                    this.render();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.gameScore;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                var loseMessage = document.querySelector(\".message-lose\");\n                var winMessage = document.querySelector(\".message-win\");\n                var startMessage = document.querySelector(\".message-start\");\n                loseMessage.classList.add(\"hidden\");\n                winMessage.classList.add(\"hidden\");\n                startMessage.classList.remove(\"hidden\");\n                this.status = \"playing\";\n                this.gameScore = 0;\n                var btn = document.querySelector(\"button\");\n                btn.classList.remove(\"start\");\n                btn.classList.add(\"restart\");\n                btn.textContent = \"Restart\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.render();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var cells = document.querySelectorAll(\".field-cell\");\n                var index = 0;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n                        var row = _step.value;\n                        try {\n                            for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){\n                                var value = _step1.value;\n                                var cell = cells[index];\n                                cell.textContent = value === 0 ? \"\" : value;\n                                cell.className = \"field-cell\";\n                                if (value > 0) cell.classList.add(\"field-cell--\".concat(value));\n                                index++;\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                document.querySelector(\".game-score\").textContent = this.gameScore;\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board.length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length === 0) return;\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                var randomCell = emptyCells[randomIndex];\n                var newValue = Math.random() < 0.9 ? 2 : 4;\n                this.board[randomCell.row][randomCell.col] = newValue;\n            }\n        },\n        {\n            key: \"arraysEqual\",\n            value: function arraysEqual(arr1, arr2) {\n                return arr1.length === arr2.length && arr1.every(function(value, index) {\n                    return value === arr2[index];\n                });\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(\"2048\")) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        for(var i = 0; i < row.length - 1; i++){\n                            if (row[i] === row[i + 1]) return false;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var col = 0; col < this.board.length; col++)for(var row1 = 0; row1 < this.board.length - 1; row1++){\n                    if (this.board[row1][col] === this.board[row1 + 1][col]) return false;\n                }\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined, _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;\n                try {\n                    for(var _iterator1 = this.board[Symbol.iterator](), _step1; !(_iteratorNormalCompletion2 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion2 = true){\n                        var row2 = _step1.value;\n                        try {\n                            for(var _iterator2 = row2[Symbol.iterator](), _step2; !(_iteratorNormalCompletion1 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion1 = true){\n                                var cell = _step2.value;\n                                if (cell === 0) return false;\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator2.return != null) {\n                                    _iterator2.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n                return true;\n            }\n        },\n        {\n            key: \"updateStatus\",\n            value: function updateStatus() {\n                var winMessage = document.querySelector(\".message-win\");\n                var loseMessage = document.querySelector(\".message-lose\");\n                var startMessage = document.querySelector(\".message-start\");\n                if (this.checkWin()) {\n                    this.status = \"win\";\n                    startMessage.classList.add(\"hidden\");\n                    winMessage.classList.remove(\"hidden\");\n                } else if (this.checkLose()) {\n                    this.status = \"lose\";\n                    startMessage.classList.add(\"hidden\");\n                    loseMessage.classList.remove(\"hidden\");\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$btnStart = document.querySelector(\".start\");\n$197cd56b15c33885$var$btnStart.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    e.preventDefault();\n    switch(e.code){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=index.b1aa7178.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst btnStart = document.querySelector('.start');\n\nbtnStart.addEventListener('click', () => {\n  game.start();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.gameScore = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    let movedLeft = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      let newRow = this.board[row].filter((value) => value !== 0);\n\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (i < newRow.length - 1 && newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.gameScore += newRow[i] * 2;\n          newRow[i + 1] = 0;\n          movedLeft = true;\n        } else if (newRow[i] !== 0) {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      newRow = mergedRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        movedLeft = true;\n      }\n    }\n\n    if (movedLeft) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveRight() {\n    let movedRight = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      let newRow = this.board[row].filter((value) => value !== 0);\n      const mergedRow = [];\n\n      for (let i = newRow.length - 1; i >= 0; i--) {\n        if (i > 0 && newRow[i] === newRow[i - 1]) {\n          mergedRow.unshift(newRow[i] * 2);\n          this.gameScore += newRow[i] * 2;\n          newRow[i - 1] = 0;\n          movedRight = true;\n        } else if (newRow[i] !== 0) {\n          mergedRow.unshift(newRow[i]);\n        }\n      }\n      newRow = mergedRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        movedRight = true;\n      }\n    }\n\n    if (movedRight) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveUp() {\n    let movedUp = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      const mergedCol = [];\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (i < newCol.length - 1 && newCol[i] === newCol[i + 1]) {\n          mergedCol.push(newCol[i] * 2);\n          this.gameScore += newCol[i] * 2;\n          newCol[i + 1] = 0;\n          movedUp = true;\n        } else if (newCol[i] !== 0) {\n          mergedCol.push(newCol[i]);\n        }\n      }\n      newCol = mergedCol.filter((value) => value !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          movedUp = true;\n        }\n      }\n    }\n\n    if (movedUp) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveDown() {\n    let movedDown = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      const mergedCol = [];\n\n      for (let i = newCol.length - 1; i >= 0; i--) {\n        if (i > 0 && newCol[i] === newCol[i - 1]) {\n          mergedCol.unshift(newCol[i] * 2);\n          this.gameScore += newCol[i] * 2;\n          newCol[i - 1] = 0;\n          movedDown = true;\n        } else if (newCol[i] !== 0) {\n          mergedCol.unshift(newCol[i]);\n        }\n      }\n      newCol = mergedCol.filter((value) => value !== 0);\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          movedDown = true;\n        }\n      }\n    }\n\n    if (movedDown) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.gameScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    const loseMessage = document.querySelector('.message-lose');\n    const winMessage = document.querySelector('.message-win');\n    const startMessage = document.querySelector('.message-start');\n\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    startMessage.classList.remove('hidden');\n\n    this.status = 'playing';\n    this.gameScore = 0;\n\n    const btn = document.querySelector('button');\n\n    btn.classList.remove('start');\n\n    btn.classList.add('restart');\n\n    btn.textContent = 'Restart';\n\n    this.addRandomTile();\n    this.addRandomTile();\n\n    this.render();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  render() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (const row of this.board) {\n      for (const value of row) {\n        const cell = cells[index];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n\n        if (value > 0) {\n          cell.classList.add(`field-cell--${value}`);\n        }\n        index++;\n      }\n    }\n\n    document.querySelector('.game-score').textContent = this.gameScore;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board.length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[randomCell.row][randomCell.col] = newValue;\n  }\n\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((value, index) => value === arr2[index])\n    );\n  }\n\n  checkWin() {\n    for (const row of this.board) {\n      if (row.includes('2048')) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (const row of this.board) {\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let col = 0; col < this.board.length; col++) {\n      for (let row = 0; row < this.board.length - 1; row++) {\n        if (this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    for (const row of this.board) {\n      for (const cell of row) {\n        if (cell === 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateStatus() {\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n    const startMessage = document.querySelector('.message-start');\n\n    if (this.checkWin()) {\n      this.status = 'win';\n      startMessage.classList.add('hidden');\n      winMessage.classList.remove('hidden');\n    } else if (this.checkLose()) {\n      this.status = 'lose';\n      startMessage.classList.add('hidden');\n      loseMessage.classList.remove('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","board","gameScore","status","key","value","_this","movedLeft","row","_loop","newRow","filter","mergedRow","i","push","arraysEqual","addRandomTile","render","updateStatus","movedRight","unshift","movedUp","col","newCol","mergedCol","row1","movedDown","loseMessage","document","querySelector","winMessage","startMessage","classList","add","remove","btn","textContent","start","cells","querySelectorAll","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step","_iterator","Symbol","iterator","next","done","_step1","_iterator1","cell","className","concat","err","return","emptyCells","randomIndex","Math","floor","random","randomCell","arr1","arr2","every","includes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","row2","_step2","_iterator2","checkWin","checkLose","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$btnStart","addEventListener","e","preventDefault","code","moveLeft","moveUp","moveRight","moveDown"],"version":3,"file":"index.b1aa7178.js.map"}