{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.gameScore = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        let movedLeft = false;\n        for(let row = 0; row < this.board.length; row++){\n            let newRow = this.board[row].filter((value)=>value !== 0);\n            const mergedRow = [];\n            for(let i = 0; i < newRow.length; i++){\n                if (i < newRow.length - 1 && newRow[i] === newRow[i + 1]) {\n                    mergedRow.push(newRow[i] * 2);\n                    this.gameScore += newRow[i] * 2;\n                    newRow[i + 1] = 0;\n                    movedLeft = true;\n                } else if (newRow[i] !== 0) mergedRow.push(newRow[i]);\n            }\n            newRow = mergedRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            if (!this.arraysEqual(this.board[row], newRow)) {\n                this.board[row] = newRow;\n                movedLeft = true;\n            }\n        }\n        if (movedLeft) {\n            this.addRandomTile();\n            this.render();\n            this.updateStatus();\n        }\n    }\n    moveRight() {\n        let movedRight = false;\n        for(let row = 0; row < this.board.length; row++){\n            let newRow = this.board[row].filter((value)=>value !== 0);\n            const mergedRow = [];\n            for(let i = newRow.length - 1; i >= 0; i--){\n                if (i > 0 && newRow[i] === newRow[i - 1]) {\n                    mergedRow.unshift(newRow[i] * 2);\n                    this.gameScore += newRow[i] * 2;\n                    newRow[i - 1] = 0;\n                    movedRight = true;\n                } else if (newRow[i] !== 0) mergedRow.unshift(newRow[i]);\n            }\n            newRow = mergedRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.unshift(0);\n            if (!this.arraysEqual(this.board[row], newRow)) {\n                this.board[row] = newRow;\n                movedRight = true;\n            }\n        }\n        if (movedRight) {\n            this.addRandomTile();\n            this.render();\n            this.updateStatus();\n        }\n    }\n    moveUp() {\n        let movedUp = false;\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            const mergedCol = [];\n            for(let i = 0; i < newCol.length; i++){\n                if (i < newCol.length - 1 && newCol[i] === newCol[i + 1]) {\n                    mergedCol.push(newCol[i] * 2);\n                    this.gameScore += newCol[i] * 2;\n                    newCol[i + 1] = 0;\n                    movedUp = true;\n                } else if (newCol[i] !== 0) mergedCol.push(newCol[i]);\n            }\n            newCol = mergedCol.filter((value)=>value !== 0);\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                movedUp = true;\n            }\n        }\n        if (movedUp) {\n            this.addRandomTile();\n            this.render();\n            this.updateStatus();\n        }\n    }\n    moveDown() {\n        let movedDown = false;\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            const mergedCol = [];\n            for(let i = newCol.length - 1; i >= 0; i--){\n                if (i > 0 && newCol[i] === newCol[i - 1]) {\n                    mergedCol.unshift(newCol[i] * 2);\n                    this.gameScore += newCol[i] * 2;\n                    newCol[i - 1] = 0;\n                    movedDown = true;\n                } else if (newCol[i] !== 0) mergedCol.unshift(newCol[i]);\n            }\n            newCol = mergedCol.filter((value)=>value !== 0);\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                movedDown = true;\n            }\n        }\n        if (movedDown) {\n            this.addRandomTile();\n            this.render();\n            this.updateStatus();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.gameScore;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        const loseMessage = document.querySelector(\".message-lose\");\n        const winMessage = document.querySelector(\".message-win\");\n        const startMessage = document.querySelector(\".message-start\");\n        loseMessage.classList.add(\"hidden\");\n        winMessage.classList.add(\"hidden\");\n        startMessage.classList.remove(\"hidden\");\n        this.status = \"playing\";\n        this.gameScore = 0;\n        const btn = document.querySelector(\"button\");\n        btn.classList.remove(\"start\");\n        btn.classList.add(\"restart\");\n        btn.textContent = \"Restart\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.render();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    render() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let index = 0;\n        for (const row of this.board)for (const value of row){\n            const cell = cells[index];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value > 0) cell.classList.add(`field-cell--${value}`);\n            index++;\n        }\n        document.querySelector(\".game-score\").textContent = this.gameScore;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board.length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const randomCell = emptyCells[randomIndex];\n        const newValue = Math.random() < 0.9 ? 2 : 4;\n        this.board[randomCell.row][randomCell.col] = newValue;\n    }\n    arraysEqual(arr1, arr2) {\n        return arr1.length === arr2.length && arr1.every((value, index)=>value === arr2[index]);\n    }\n    checkWin() {\n        for (const row of this.board){\n            if (row.includes(\"2048\")) return true;\n        }\n        return false;\n    }\n    checkLose() {\n        for (const row of this.board)for(let i = 0; i < row.length - 1; i++){\n            if (row[i] === row[i + 1]) return false;\n        }\n        for(let col = 0; col < this.board.length; col++)for(let row = 0; row < this.board.length - 1; row++){\n            if (this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        for (const row of this.board)for (const cell of row){\n            if (cell === 0) return false;\n        }\n        return true;\n    }\n    updateStatus() {\n        const winMessage = document.querySelector(\".message-win\");\n        const loseMessage = document.querySelector(\".message-lose\");\n        const startMessage = document.querySelector(\".message-start\");\n        if (this.checkWin()) {\n            this.status = \"win\";\n            startMessage.classList.add(\"hidden\");\n            winMessage.classList.remove(\"hidden\");\n        } else if (this.checkLose()) {\n            this.status = \"lose\";\n            startMessage.classList.add(\"hidden\");\n            loseMessage.classList.remove(\"hidden\");\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$btnStart = document.querySelector(\".start\");\n$09e991522ca7e64e$var$btnStart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.04a54663.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst btnStart = document.querySelector('.start');\n\nbtnStart.addEventListener('click', () => {\n  game.start();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.gameScore = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    let movedLeft = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      let newRow = this.board[row].filter((value) => value !== 0);\n\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (i < newRow.length - 1 && newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.gameScore += newRow[i] * 2;\n          newRow[i + 1] = 0;\n          movedLeft = true;\n        } else if (newRow[i] !== 0) {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      newRow = mergedRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        movedLeft = true;\n      }\n    }\n\n    if (movedLeft) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveRight() {\n    let movedRight = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      let newRow = this.board[row].filter((value) => value !== 0);\n      const mergedRow = [];\n\n      for (let i = newRow.length - 1; i >= 0; i--) {\n        if (i > 0 && newRow[i] === newRow[i - 1]) {\n          mergedRow.unshift(newRow[i] * 2);\n          this.gameScore += newRow[i] * 2;\n          newRow[i - 1] = 0;\n          movedRight = true;\n        } else if (newRow[i] !== 0) {\n          mergedRow.unshift(newRow[i]);\n        }\n      }\n      newRow = mergedRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        movedRight = true;\n      }\n    }\n\n    if (movedRight) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveUp() {\n    let movedUp = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      const mergedCol = [];\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (i < newCol.length - 1 && newCol[i] === newCol[i + 1]) {\n          mergedCol.push(newCol[i] * 2);\n          this.gameScore += newCol[i] * 2;\n          newCol[i + 1] = 0;\n          movedUp = true;\n        } else if (newCol[i] !== 0) {\n          mergedCol.push(newCol[i]);\n        }\n      }\n      newCol = mergedCol.filter((value) => value !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          movedUp = true;\n        }\n      }\n    }\n\n    if (movedUp) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  moveDown() {\n    let movedDown = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      const mergedCol = [];\n\n      for (let i = newCol.length - 1; i >= 0; i--) {\n        if (i > 0 && newCol[i] === newCol[i - 1]) {\n          mergedCol.unshift(newCol[i] * 2);\n          this.gameScore += newCol[i] * 2;\n          newCol[i - 1] = 0;\n          movedDown = true;\n        } else if (newCol[i] !== 0) {\n          mergedCol.unshift(newCol[i]);\n        }\n      }\n      newCol = mergedCol.filter((value) => value !== 0);\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          movedDown = true;\n        }\n      }\n    }\n\n    if (movedDown) {\n      this.addRandomTile();\n      this.render();\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.gameScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    const loseMessage = document.querySelector('.message-lose');\n    const winMessage = document.querySelector('.message-win');\n    const startMessage = document.querySelector('.message-start');\n\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    startMessage.classList.remove('hidden');\n\n    this.status = 'playing';\n    this.gameScore = 0;\n\n    const btn = document.querySelector('button');\n\n    btn.classList.remove('start');\n\n    btn.classList.add('restart');\n\n    btn.textContent = 'Restart';\n\n    this.addRandomTile();\n    this.addRandomTile();\n\n    this.render();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  render() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (const row of this.board) {\n      for (const value of row) {\n        const cell = cells[index];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n\n        if (value > 0) {\n          cell.classList.add(`field-cell--${value}`);\n        }\n        index++;\n      }\n    }\n\n    document.querySelector('.game-score').textContent = this.gameScore;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board.length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[randomCell.row][randomCell.col] = newValue;\n  }\n\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((value, index) => value === arr2[index])\n    );\n  }\n\n  checkWin() {\n    for (const row of this.board) {\n      if (row.includes('2048')) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (const row of this.board) {\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let col = 0; col < this.board.length; col++) {\n      for (let row = 0; row < this.board.length - 1; row++) {\n        if (this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    for (const row of this.board) {\n      for (const cell of row) {\n        if (cell === 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateStatus() {\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n    const startMessage = document.querySelector('.message-start');\n\n    if (this.checkWin()) {\n      this.status = 'win';\n      startMessage.classList.add('hidden');\n      winMessage.classList.remove('hidden');\n    } else if (this.checkLose()) {\n      this.status = 'lose';\n      startMessage.classList.add('hidden');\n      loseMessage.classList.remove('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","gameScore","status","moveLeft","movedLeft","row","length","newRow","filter","value","mergedRow","i","push","arraysEqual","addRandomTile","render","updateStatus","moveRight","movedRight","unshift","moveUp","movedUp","col","newCol","mergedCol","moveDown","movedDown","getScore","getState","getStatus","start","loseMessage","document","querySelector","winMessage","startMessage","classList","add","remove","btn","textContent","restart","cells","querySelectorAll","index","cell","className","emptyCells","randomIndex","Math","floor","random","randomCell","arr1","arr2","every","checkWin","includes","checkLose","$09e991522ca7e64e$var$btnStart","addEventListener","e","preventDefault","code"],"version":3,"file":"index.04a54663.js.map"}